pipeline {
    agent any
    environment {
        // Definir una variable de entorno "BRANCH_NAME" basada en la variable que viene de GitHub
        ANSIBLE_REPO = 'https://github.com/lizy1987/ansible.git'
        ANSIBLE_BRANCH = 'main'
        REPO_SQL = 'https://github.com/lizy1987/BD.git'
        
        
    }

    stages {
        stage('Descarga playbook') {
            steps {
                sh """
                git clone -b ${ANSIBLE_BRANCH} ${ANSIBLE_REPO} ansible-playbooks
                """
                // Verificar que los playbooks se han descargado
                echo "Playbooks descargados en el directorio ansible-playbooks/"
                    
                }
            }
        
        stage('Set ambiente') {
            steps{
                echo "Ambiente: ${params.amb}"
                echo "Branch_name: ${params.branch_name}"

                build job: "Host" , parameters: [string(name: 'AMBIENTE', value:"${params.amb}")]
            }    
            
        }

        stage('ClonGitRelease') {
            steps{
                ansiblePlaybook credentialsId: 'ubuJenkis', extras: "-e amb=${params.amb} -e branch=${params.branch_name} -e URLGIT=${REPO_SQL}", installation: 'ansible', inventory: '/etc/ansible/hosts',  limit: 'JENKINS', playbook: 'ansible-playbooks/Pers_BD/CloneGitRelease.yml'
            }    
            
        }

        stage('Execute Personalizaciones') {
            steps{
                ansiblePlaybook credentialsId: 'oracleDB', extras: "-e amb=${amb} -e branch=${params.branch_name} -e sql_pers=yes", installation: 'ansible', inventory: '/etc/ansible/hosts',  limit: 'BD', playbook: 'ansible-playbooks/Pers_BD/ExecuteSQLScript.yml'
            }    
            
        }
    }
    post {
        always {
            // Limpiar el workspace después de la ejecución
            cleanWs()
        }
    }
}

